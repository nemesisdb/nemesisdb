// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: set.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_set_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_set_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_set_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_set_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_set_2eproto;
namespace ndb {
namespace request {
class Get;
struct GetDefaultTypeInternal;
extern GetDefaultTypeInternal _Get_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Set;
struct SetDefaultTypeInternal;
extern SetDefaultTypeInternal _Set_default_instance_;
}  // namespace request
}  // namespace ndb
PROTOBUF_NAMESPACE_OPEN
template<> ::ndb::request::Get* Arena::CreateMaybeMessage<::ndb::request::Get>(Arena*);
template<> ::ndb::request::Request* Arena::CreateMaybeMessage<::ndb::request::Request>(Arena*);
template<> ::ndb::request::Set* Arena::CreateMaybeMessage<::ndb::request::Set>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ndb {
namespace request {

// ===================================================================

class Set final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ndb.request.Set) */ {
 public:
  inline Set() : Set(nullptr) {}
  ~Set() override;
  explicit PROTOBUF_CONSTEXPR Set(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Set(const Set& from);
  Set(Set&& from) noexcept
    : Set() {
    *this = ::std::move(from);
  }

  inline Set& operator=(const Set& from) {
    CopyFrom(from);
    return *this;
  }
  inline Set& operator=(Set&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Set& default_instance() {
    return *internal_default_instance();
  }
  static inline const Set* internal_default_instance() {
    return reinterpret_cast<const Set*>(
               &_Set_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Set& a, Set& b) {
    a.Swap(&b);
  }
  inline void Swap(Set* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Set* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Set* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Set>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Set& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Set& from) {
    Set::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Set* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ndb.request.Set";
  }
  protected:
  explicit Set(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvFieldNumber = 1,
  };
  // .google.protobuf.Struct kv = 1;
  bool has_kv() const;
  private:
  bool _internal_has_kv() const;
  public:
  void clear_kv();
  const ::PROTOBUF_NAMESPACE_ID::Struct& kv() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_kv();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_kv();
  void set_allocated_kv(::PROTOBUF_NAMESPACE_ID::Struct* kv);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_kv() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_kv();
  public:
  void unsafe_arena_set_allocated_kv(
      ::PROTOBUF_NAMESPACE_ID::Struct* kv);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_kv();

  // @@protoc_insertion_point(class_scope:ndb.request.Set)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Struct* kv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_set_2eproto;
};
// -------------------------------------------------------------------

class Get final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ndb.request.Get) */ {
 public:
  inline Get() : Get(nullptr) {}
  ~Get() override;
  explicit PROTOBUF_CONSTEXPR Get(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Get(const Get& from);
  Get(Get&& from) noexcept
    : Get() {
    *this = ::std::move(from);
  }

  inline Get& operator=(const Get& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get& operator=(Get&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Get& default_instance() {
    return *internal_default_instance();
  }
  static inline const Get* internal_default_instance() {
    return reinterpret_cast<const Get*>(
               &_Get_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Get& a, Get& b) {
    a.Swap(&b);
  }
  inline void Swap(Get* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Get* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Get* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Get>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Get& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Get& from) {
    Get::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ndb.request.Get";
  }
  protected:
  explicit Get(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // @@protoc_insertion_point(class_scope:ndb.request.Get)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_set_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ndb.request.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum KvCase {
    kGet = 1,
    kSet = 2,
    KV_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ndb.request.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetFieldNumber = 1,
    kSetFieldNumber = 2,
  };
  // .ndb.request.Get get = 1;
  bool has_get() const;
  private:
  bool _internal_has_get() const;
  public:
  void clear_get();
  const ::ndb::request::Get& get() const;
  PROTOBUF_NODISCARD ::ndb::request::Get* release_get();
  ::ndb::request::Get* mutable_get();
  void set_allocated_get(::ndb::request::Get* get);
  private:
  const ::ndb::request::Get& _internal_get() const;
  ::ndb::request::Get* _internal_mutable_get();
  public:
  void unsafe_arena_set_allocated_get(
      ::ndb::request::Get* get);
  ::ndb::request::Get* unsafe_arena_release_get();

  // .ndb.request.Set set = 2;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::ndb::request::Set& set() const;
  PROTOBUF_NODISCARD ::ndb::request::Set* release_set();
  ::ndb::request::Set* mutable_set();
  void set_allocated_set(::ndb::request::Set* set);
  private:
  const ::ndb::request::Set& _internal_set() const;
  ::ndb::request::Set* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::ndb::request::Set* set);
  ::ndb::request::Set* unsafe_arena_release_set();

  void clear_kv();
  KvCase kv_case() const;
  // @@protoc_insertion_point(class_scope:ndb.request.Request)
 private:
  class _Internal;
  void set_has_get();
  void set_has_set();

  inline bool has_kv() const;
  inline void clear_has_kv();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KvUnion {
      constexpr KvUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::ndb::request::Get* get_;
      ::ndb::request::Set* set_;
    } kv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_set_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Set

// .google.protobuf.Struct kv = 1;
inline bool Set::_internal_has_kv() const {
  return this != internal_default_instance() && _impl_.kv_ != nullptr;
}
inline bool Set::has_kv() const {
  return _internal_has_kv();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Set::_internal_kv() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Set::kv() const {
  // @@protoc_insertion_point(field_get:ndb.request.Set.kv)
  return _internal_kv();
}
inline void Set::unsafe_arena_set_allocated_kv(
    ::PROTOBUF_NAMESPACE_ID::Struct* kv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  _impl_.kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ndb.request.Set.kv)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Set::release_kv() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Set::unsafe_arena_release_kv() {
  // @@protoc_insertion_point(field_release:ndb.request.Set.kv)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Set::_internal_mutable_kv() {
  
  if (_impl_.kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.kv_ = p;
  }
  return _impl_.kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Set::mutable_kv() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_kv();
  // @@protoc_insertion_point(field_mutable:ndb.request.Set.kv)
  return _msg;
}
inline void Set::set_allocated_kv(::PROTOBUF_NAMESPACE_ID::Struct* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kv));
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:ndb.request.Set.kv)
}

// -------------------------------------------------------------------

// Get

// repeated string keys = 2;
inline int Get::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int Get::keys_size() const {
  return _internal_keys_size();
}
inline void Get::clear_keys() {
  _impl_.keys_.Clear();
}
inline std::string* Get::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:ndb.request.Get.keys)
  return _s;
}
inline const std::string& Get::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const std::string& Get::keys(int index) const {
  // @@protoc_insertion_point(field_get:ndb.request.Get.keys)
  return _internal_keys(index);
}
inline std::string* Get::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ndb.request.Get.keys)
  return _impl_.keys_.Mutable(index);
}
inline void Get::set_keys(int index, const std::string& value) {
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ndb.request.Get.keys)
}
inline void Get::set_keys(int index, std::string&& value) {
  _impl_.keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ndb.request.Get.keys)
}
inline void Get::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ndb.request.Get.keys)
}
inline void Get::set_keys(int index, const char* value, size_t size) {
  _impl_.keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndb.request.Get.keys)
}
inline std::string* Get::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline void Get::add_keys(const std::string& value) {
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ndb.request.Get.keys)
}
inline void Get::add_keys(std::string&& value) {
  _impl_.keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ndb.request.Get.keys)
}
inline void Get::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ndb.request.Get.keys)
}
inline void Get::add_keys(const char* value, size_t size) {
  _impl_.keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ndb.request.Get.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Get::keys() const {
  // @@protoc_insertion_point(field_list:ndb.request.Get.keys)
  return _impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Get::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ndb.request.Get.keys)
  return &_impl_.keys_;
}

// -------------------------------------------------------------------

// Request

// .ndb.request.Get get = 1;
inline bool Request::_internal_has_get() const {
  return kv_case() == kGet;
}
inline bool Request::has_get() const {
  return _internal_has_get();
}
inline void Request::set_has_get() {
  _impl_._oneof_case_[0] = kGet;
}
inline void Request::clear_get() {
  if (_internal_has_get()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kv_.get_;
    }
    clear_has_kv();
  }
}
inline ::ndb::request::Get* Request::release_get() {
  // @@protoc_insertion_point(field_release:ndb.request.Request.get)
  if (_internal_has_get()) {
    clear_has_kv();
    ::ndb::request::Get* temp = _impl_.kv_.get_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kv_.get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ndb::request::Get& Request::_internal_get() const {
  return _internal_has_get()
      ? *_impl_.kv_.get_
      : reinterpret_cast< ::ndb::request::Get&>(::ndb::request::_Get_default_instance_);
}
inline const ::ndb::request::Get& Request::get() const {
  // @@protoc_insertion_point(field_get:ndb.request.Request.get)
  return _internal_get();
}
inline ::ndb::request::Get* Request::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ndb.request.Request.get)
  if (_internal_has_get()) {
    clear_has_kv();
    ::ndb::request::Get* temp = _impl_.kv_.get_;
    _impl_.kv_.get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get(::ndb::request::Get* get) {
  clear_kv();
  if (get) {
    set_has_get();
    _impl_.kv_.get_ = get;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ndb.request.Request.get)
}
inline ::ndb::request::Get* Request::_internal_mutable_get() {
  if (!_internal_has_get()) {
    clear_kv();
    set_has_get();
    _impl_.kv_.get_ = CreateMaybeMessage< ::ndb::request::Get >(GetArenaForAllocation());
  }
  return _impl_.kv_.get_;
}
inline ::ndb::request::Get* Request::mutable_get() {
  ::ndb::request::Get* _msg = _internal_mutable_get();
  // @@protoc_insertion_point(field_mutable:ndb.request.Request.get)
  return _msg;
}

// .ndb.request.Set set = 2;
inline bool Request::_internal_has_set() const {
  return kv_case() == kSet;
}
inline bool Request::has_set() const {
  return _internal_has_set();
}
inline void Request::set_has_set() {
  _impl_._oneof_case_[0] = kSet;
}
inline void Request::clear_set() {
  if (_internal_has_set()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kv_.set_;
    }
    clear_has_kv();
  }
}
inline ::ndb::request::Set* Request::release_set() {
  // @@protoc_insertion_point(field_release:ndb.request.Request.set)
  if (_internal_has_set()) {
    clear_has_kv();
    ::ndb::request::Set* temp = _impl_.kv_.set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kv_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ndb::request::Set& Request::_internal_set() const {
  return _internal_has_set()
      ? *_impl_.kv_.set_
      : reinterpret_cast< ::ndb::request::Set&>(::ndb::request::_Set_default_instance_);
}
inline const ::ndb::request::Set& Request::set() const {
  // @@protoc_insertion_point(field_get:ndb.request.Request.set)
  return _internal_set();
}
inline ::ndb::request::Set* Request::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ndb.request.Request.set)
  if (_internal_has_set()) {
    clear_has_kv();
    ::ndb::request::Set* temp = _impl_.kv_.set_;
    _impl_.kv_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set(::ndb::request::Set* set) {
  clear_kv();
  if (set) {
    set_has_set();
    _impl_.kv_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ndb.request.Request.set)
}
inline ::ndb::request::Set* Request::_internal_mutable_set() {
  if (!_internal_has_set()) {
    clear_kv();
    set_has_set();
    _impl_.kv_.set_ = CreateMaybeMessage< ::ndb::request::Set >(GetArenaForAllocation());
  }
  return _impl_.kv_.set_;
}
inline ::ndb::request::Set* Request::mutable_set() {
  ::ndb::request::Set* _msg = _internal_mutable_set();
  // @@protoc_insertion_point(field_mutable:ndb.request.Request.set)
  return _msg;
}

inline bool Request::has_kv() const {
  return kv_case() != KV_NOT_SET;
}
inline void Request::clear_has_kv() {
  _impl_._oneof_case_[0] = KV_NOT_SET;
}
inline Request::KvCase Request::kv_case() const {
  return Request::KvCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace ndb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_set_2eproto
