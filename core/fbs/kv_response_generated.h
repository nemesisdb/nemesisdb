// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_KVRESPONSE_NDB_RESPONSE_H_
#define FLATBUFFERS_GENERATED_KVRESPONSE_NDB_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace ndb {
namespace response {

struct Response;
struct ResponseBuilder;

enum Status : int32_t {
  Status_Fail = 0,
  Status_Ok = 1,
  Status_CommandUnknown = 2,
  Status_ParseError = 3,
  Status_MIN = Status_Fail,
  Status_MAX = Status_ParseError
};

inline const Status (&EnumValuesStatus())[4] {
  static const Status values[] = {
    Status_Fail,
    Status_Ok,
    Status_CommandUnknown,
    Status_ParseError
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[5] = {
    "Fail",
    "Ok",
    "CommandUnknown",
    "ParseError",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (::flatbuffers::IsOutRange(e, Status_Fail, Status_ParseError)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

struct Response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4
  };
  ndb::response::Status status() const {
    return static_cast<ndb::response::Status>(GetField<int32_t>(VT_STATUS, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS, 4) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  typedef Response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(ndb::response::Status status) {
    fbb_.AddElement<int32_t>(Response::VT_STATUS, static_cast<int32_t>(status), 0);
  }
  explicit ResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Response> CreateResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ndb::response::Status status = ndb::response::Status_Fail) {
  ResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

}  // namespace response
}  // namespace ndb

#endif  // FLATBUFFERS_GENERATED_KVRESPONSE_NDB_RESPONSE_H_
