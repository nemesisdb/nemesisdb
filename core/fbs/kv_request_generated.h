// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_KVREQUEST_NDB_REQUEST_H_
#define FLATBUFFERS_GENERATED_KVREQUEST_NDB_REQUEST_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"
#include "flatbuffers/flex_flat_util.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace ndb {
namespace request {

struct KVSet;
struct KVSetBuilder;

struct KVGet;
struct KVGetBuilder;

struct KVRmv;
struct KVRmvBuilder;

struct Request;
struct RequestBuilder;

enum RequestBody : uint8_t {
  RequestBody_NONE = 0,
  RequestBody_KVSet = 1,
  RequestBody_KVGet = 2,
  RequestBody_KVRmv = 3,
  RequestBody_MIN = RequestBody_NONE,
  RequestBody_MAX = RequestBody_KVRmv
};

inline const RequestBody (&EnumValuesRequestBody())[4] {
  static const RequestBody values[] = {
    RequestBody_NONE,
    RequestBody_KVSet,
    RequestBody_KVGet,
    RequestBody_KVRmv
  };
  return values;
}

inline const char * const *EnumNamesRequestBody() {
  static const char * const names[5] = {
    "NONE",
    "KVSet",
    "KVGet",
    "KVRmv",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestBody(RequestBody e) {
  if (::flatbuffers::IsOutRange(e, RequestBody_NONE, RequestBody_KVRmv)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestBody()[index];
}

template<typename T> struct RequestBodyTraits {
  static const RequestBody enum_value = RequestBody_NONE;
};

template<> struct RequestBodyTraits<ndb::request::KVSet> {
  static const RequestBody enum_value = RequestBody_KVSet;
};

template<> struct RequestBodyTraits<ndb::request::KVGet> {
  static const RequestBody enum_value = RequestBody_KVGet;
};

template<> struct RequestBodyTraits<ndb::request::KVRmv> {
  static const RequestBody enum_value = RequestBody_KVRmv;
};

bool VerifyRequestBody(::flatbuffers::Verifier &verifier, const void *obj, RequestBody type);
bool VerifyRequestBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct KVSet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVSetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KV = 4
  };
  const ::flatbuffers::Vector<uint8_t> *kv() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_KV);
  }
  flexbuffers::Reference kv_flexbuffer_root() const {
    const auto _f = kv();
    return _f ? flexbuffers::GetRoot(_f->Data(), _f->size())
              : flexbuffers::Reference();
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KV) &&
           verifier.VerifyVector(kv()) &&
           flexbuffers::VerifyNestedFlexBuffer(kv(), verifier) &&
           verifier.EndTable();
  }
};

struct KVSetBuilder {
  typedef KVSet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_kv(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> kv) {
    fbb_.AddOffset(KVSet::VT_KV, kv);
  }
  explicit KVSetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVSet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVSet> CreateKVSet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> kv = 0) {
  KVSetBuilder builder_(_fbb);
  builder_.add_kv(kv);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KVSet> CreateKVSetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *kv = nullptr) {
  auto kv__ = kv ? _fbb.CreateVector<uint8_t>(*kv) : 0;
  return ndb::request::CreateKVSet(
      _fbb,
      kv__);
}

struct KVGet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVGetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *keys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_KEYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           verifier.EndTable();
  }
};

struct KVGetBuilder {
  typedef KVGet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys) {
    fbb_.AddOffset(KVGet::VT_KEYS, keys);
  }
  explicit KVGetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVGet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVGet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVGet> CreateKVGet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys = 0) {
  KVGetBuilder builder_(_fbb);
  builder_.add_keys(keys);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KVGet> CreateKVGetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *keys = nullptr) {
  auto keys__ = keys ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*keys) : 0;
  return ndb::request::CreateKVGet(
      _fbb,
      keys__);
}

struct KVRmv FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KVRmvBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *keys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_KEYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           verifier.EndTable();
  }
};

struct KVRmvBuilder {
  typedef KVRmv Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys) {
    fbb_.AddOffset(KVRmv::VT_KEYS, keys);
  }
  explicit KVRmvBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KVRmv> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KVRmv>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KVRmv> CreateKVRmv(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys = 0) {
  KVRmvBuilder builder_(_fbb);
  builder_.add_keys(keys);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KVRmv> CreateKVRmvDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *keys = nullptr) {
  auto keys__ = keys ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*keys) : 0;
  return ndb::request::CreateKVRmv(
      _fbb,
      keys__);
}

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDENT = 4,
    VT_BODY_TYPE = 6,
    VT_BODY = 8
  };
  ndb::common::Ident ident() const {
    return static_cast<ndb::common::Ident>(GetField<int8_t>(VT_IDENT, 0));
  }
  ndb::request::RequestBody body_type() const {
    return static_cast<ndb::request::RequestBody>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const ndb::request::KVSet *body_as_KVSet() const {
    return body_type() == ndb::request::RequestBody_KVSet ? static_cast<const ndb::request::KVSet *>(body()) : nullptr;
  }
  const ndb::request::KVGet *body_as_KVGet() const {
    return body_type() == ndb::request::RequestBody_KVGet ? static_cast<const ndb::request::KVGet *>(body()) : nullptr;
  }
  const ndb::request::KVRmv *body_as_KVRmv() const {
    return body_type() == ndb::request::RequestBody_KVRmv ? static_cast<const ndb::request::KVRmv *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_IDENT, 1) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyRequestBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ndb::request::KVSet *Request::body_as<ndb::request::KVSet>() const {
  return body_as_KVSet();
}

template<> inline const ndb::request::KVGet *Request::body_as<ndb::request::KVGet>() const {
  return body_as_KVGet();
}

template<> inline const ndb::request::KVRmv *Request::body_as<ndb::request::KVRmv>() const {
  return body_as_KVRmv();
}

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ident(ndb::common::Ident ident) {
    fbb_.AddElement<int8_t>(Request::VT_IDENT, static_cast<int8_t>(ident), 0);
  }
  void add_body_type(ndb::request::RequestBody body_type) {
    fbb_.AddElement<uint8_t>(Request::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Request::VT_BODY, body);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ndb::common::Ident ident = ndb::common::Ident_KV,
    ndb::request::RequestBody body_type = ndb::request::RequestBody_NONE,
    ::flatbuffers::Offset<void> body = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_body_type(body_type);
  builder_.add_ident(ident);
  return builder_.Finish();
}

inline bool VerifyRequestBody(::flatbuffers::Verifier &verifier, const void *obj, RequestBody type) {
  switch (type) {
    case RequestBody_NONE: {
      return true;
    }
    case RequestBody_KVSet: {
      auto ptr = reinterpret_cast<const ndb::request::KVSet *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestBody_KVGet: {
      auto ptr = reinterpret_cast<const ndb::request::KVGet *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestBody_KVRmv: {
      auto ptr = reinterpret_cast<const ndb::request::KVRmv *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRequestBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequestBody(
        verifier,  values->Get(i), types->GetEnum<RequestBody>(i))) {
      return false;
    }
  }
  return true;
}

inline const ndb::request::Request *GetRequest(const void *buf) {
  return ::flatbuffers::GetRoot<ndb::request::Request>(buf);
}

inline const ndb::request::Request *GetSizePrefixedRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ndb::request::Request>(buf);
}

inline bool VerifyRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ndb::request::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ndb::request::Request>(nullptr);
}

inline void FinishRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ndb::request::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ndb::request::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace request
}  // namespace ndb

#endif  // FLATBUFFERS_GENERATED_KVREQUEST_NDB_REQUEST_H_
