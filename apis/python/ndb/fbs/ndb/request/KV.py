# automatically generated by the FlatBuffers compiler, do not modify

# namespace: request

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KV(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KV()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKV(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KV
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KV
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KV
    def ValType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # KV
    def Val(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def KVStart(builder):
    builder.StartObject(3)

def Start(builder):
    KVStart(builder)

def KVAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    KVAddKey(builder, key)

def KVAddValType(builder, valType):
    builder.PrependUint8Slot(1, valType, 0)

def AddValType(builder, valType):
    KVAddValType(builder, valType)

def KVAddVal(builder, val):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(val), 0)

def AddVal(builder, val):
    KVAddVal(builder, val)

def KVEnd(builder):
    return builder.EndObject()

def End(builder):
    return KVEnd(builder)
