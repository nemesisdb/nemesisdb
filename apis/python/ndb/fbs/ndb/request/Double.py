# automatically generated by the FlatBuffers compiler, do not modify

# namespace: request

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Double(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Double()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDouble(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DoubleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4B\x56\x20\x20", size_prefixed=size_prefixed)

    # Double
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Double
    def Val(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DoubleStart(builder):
    builder.StartObject(1)

def Start(builder):
    DoubleStart(builder)

def DoubleAddVal(builder, val):
    builder.PrependFloat64Slot(0, val, 0.0)

def AddVal(builder, val):
    DoubleAddVal(builder, val)

def DoubleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DoubleEnd(builder)
